# Releases the latest version of Optic on NPM/Brew/Debian
# Assumes the version has been updated
# Triggers on all changes to the release branch

name: Release

env:
  BUCKET_NAME: optic-packages
  PACKAGE_NAME: api
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  push:
    branches:
      - release
  # TODO: remove pull-request trigger, only for development of prebuilt binaries publishing
  pull_request:
    branches:
      - develop

jobs:
  build-rust-binaries:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_name: macos
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_name: win64
            suffix: .exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_name: linux
            suffix: ''
    runs-on: ${{ matrix.os }}
    env:
      FILE_NAME: optic_diff${{ matrix.suffix }}
    steps:
      - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b # https://github.com/actions/checkout/commits/v2
      - uses: actions/setup-node@44c9c187283081e4e88b54b0efad9e9d468165a4 # https://github.com/actions/setup-node/commits/v1
        with:
          node-version: 12
      - name: 'Determine version and archive name'
        shell: bash
        run: |
          OPTIC_VERSION=$(npm view @useoptic/cli version)
          echo "OPTIC_VERSION=$OPTIC_VERSION" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=optic_diff-v$OPTIC_VERSION-${{ matrix.platform_name }}" >> $GITHUB_ENV
      - name: 'Set CARGO_HOME and RUSTUP_HOME'
        run: |
          echo "RUSTUP_HOME=$HOME/.rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=$HOME/.cargo" >> $GITHUB_ENV
      - name: 'Checkout source'
        uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b # https://github.com/actions/checkout/commits/v2
      - name: 'Cache cargo registry'
        uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/commits/v2
        with:
          path: |
            ${{ env.CARGO_HOME }}/registry
            ${{ env.CARGO_HOME }}/git
          key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-vendor-v1"
      - name: 'Cache build target'
        uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/commits/v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release-target-v1"
      - name: 'Rust toolchain'
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f # https://github.com/actions-rs/toolchain/commits/v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: 'Build'
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # https://github.com/actions-rs/cargo/commits/v1
        with:
          command: build
          args: --workspace --release --target=${{ matrix.target }}
      - name: 'Flush Cargo cache to disk on macOS'
        if: runner.os == 'macOS'
        run: sudo /usr/sbin/purge
      - name: 'Upload artifact'
        uses: actions/upload-artifact@27bce4eee761b5bc643f46a8dfb41b430c8d05f6 # https://github.com/actions/upload-artifact/commits/v2
        with:
          name: ${{ env.ARCHIVE_NAME }}-build
          path: target/${{ matrix.target }}/release/${{ env.FILE_NAME }}

  publish-binaries:
    strategy:
      matrix:
        include:
          - platform_name: macos
            suffix: ''
          - platform_name: win64
            suffix: .exe
          - platform_name: linux
            suffix: ''
    runs-on: ubuntu-latest
    needs: build-rust-binaries
    env:
      FILE_NAME: optic_diff${{ matrix.suffix }}
      BUCKET: optic-packages
    steps:
      - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b # https://github.com/actions/checkout/commits/v2
      - uses: actions/setup-node@44c9c187283081e4e88b54b0efad9e9d468165a4 # https://github.com/actions/setup-node/commits/v1
        with:
          node-version: 12
      - name: 'Determine version and archive name'
        run: |
          OPTIC_VERSION=$(npm view @useoptic/cli version)
          echo "OPTIC_VERSION=$OPTIC_VERSION" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=optic_diff-v$OPTIC_VERSION-${{ matrix.platform_name }}" >> $GITHUB_ENV
      - name: Prepare directory structure
        run: |
          mkdir -p build/$ARCHIVE_NAME
          mkdir dist
      - name: Download binary
        uses: actions/download-artifact@c3f5d00c8784369c43779f3d2611769594a61f7a # https://github.com/actions/download-artifact/commits/v2
        with:
          name: ${{ env.ARCHIVE_NAME }}-build
          path: build/${{ env.ARCHIVE_NAME }}
      - name: 'Package binary'
        run: |
          chmod +x build/$ARCHIVE_NAME/$FILE_NAME
          tar -C build -czvf dist/$ARCHIVE_NAME.tar.gz $ARCHIVE_NAME
      - name: 'Debug archives'
        run: |
          ls -lsa dist
          ls -lsa build
          tar -xzvf dist/$ARCHIVE_NAME.tar.gz -C dist
          ls -lsa dist
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@c0243dfafd0e99b12caca0d56b6de8e7fb8d20db # https://github.com/aws-actions/configure-aws-credentials/commits/v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: 'Upload to S3'
        run: |
          aws s3 cp dist/$ARCHIVE_NAME.tar.gz s3://$BUCKET/dists/optic_diff/v$OPTIC_VERSION/$ARCHIVE_NAME.tar.gz --sse=AES256 --acl=public-read

  # Deploys the current version to NPM, and also verifies that the version is correct in the process
  # All Jobs rely on this job because it verifies the version
  release-npm:
    runs-on: ubuntu-latest
    needs: publish-binaries
    if: false # TODO: re-enable actual release after developing publishing of pre-builts
    steps:
    - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b # https://github.com/actions/checkout/commits/v2
      with:
          ref: release
    - uses: actions/setup-node@44c9c187283081e4e88b54b0efad9e9d468165a4 # https://github.com/actions/setup-node/commits/v1
      with:
        node-version: 12
    - name: Install Dependencies and Build Optic
      run:  |
        sudo apt-get update
        sudo apt-get install apt-transport-https -y
        echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
        sudo apt-get update
        sudo apt-get install sbt -y
        . ./sourceme.sh && optic_build
    - run: echo "//registry.npmjs.org/:_authToken=${{ secrets.PUBLISH_NPM_OPTIC_BOT }}" > ~/.npmrc
    - run: node ./workspaces/scripts/publish.js
      env:
        OPTIC_PUBLISH_SCOPE: public

  # Creates debian package for users to install, hosted on s3
  release-deb:
    runs-on: ubuntu-latest
    needs: release-npm
    steps:
      - uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b # https://github.com/actions/checkout/commits/v2
        with:
          ref: release
      - uses: ./.github/deployDebian/ # locally defined action
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: optic-packages
          PACKAGE_NAME: api
          PREFIX_NAME: deb
          NPM_PACKAGE_NAME: "@useoptic/cli"

  # Triggers Homebrew Release - Configure homebrew/core fork repository in the env settings above
  # Requires Repository Access Token (https://github.com/peter-evans/repository-dispatch#token) with repo:write scope
  trigger-brew-release:
    runs-on: ubuntu-latest
    needs: release-npm
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@56cbd49233c4b3cc03201ca29d2a7cf1271b90e1 # https://github.com/peter-evans/repository-dispatch/commits/v1.1.0
        with:
          token: ${{ secrets.HOMEBREW_UTILITY_ACCOUNT }}
          repository: opticdev/homebrew-optic
          event-type: version-update
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

  # Tells slack a release has happened
  notify-slack:
    runs-on: ubuntu-latest
    needs: release-npm
    name: Message Slack that Release has happened
    steps:
      - uses: actions/setup-node@44c9c187283081e4e88b54b0efad9e9d468165a4 # https://github.com/actions/setup-node/commits/v1
        name: Setup Node (to determine latest version of Optic)
        with:
            node-version: 12
      - run: echo "MESSAGE=${{ github.event.pusher.name }} released version $(npm view @useoptic/cli version) \n Publish Release Notes <https://github.com/opticdev/optic/releases|here>" >> $GITHUB_ENV
      - name: Send message to Slack API
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ env.MESSAGE }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}
